version: '3.8'

services:
  # Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - github-events-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_RETENTION_HOURS: 3
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - github-events-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - github-events-network

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin123;
      mc mb minio/iceberg || true;
      mc policy set public minio/iceberg;
      echo 'MinIO bucket ready';
      "
    networks:
      - github-events-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - github-events-network

  # Application Services
  producer-service:
    build:
      context: .
      dockerfile: services/producer-service/Dockerfile
    container_name: producer-service
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8001:8001"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=github-events
      - PRODUCER_API_PORT=8001
      - FETCH_INTERVAL_SECONDS=3
      - MAX_EVENTS_PER_FETCH=100
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    volumes:
      - ./services/producer-service:/app
    restart: unless-stopped
    networks:
      - github-events-network

  streaming-service:
    build:
      context: .
      dockerfile: services/streaming-service/Dockerfile
    container_name: streaming-service
    depends_on:
      kafka:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    ports:
      - "8002:8002"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=github-events
      - SPARK_MASTER=local[*]
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_BUCKET=iceberg
      - ICEBERG_WAREHOUSE_PATH=s3a://iceberg/warehouse
      - CHECKPOINT_LOCATION=s3a://iceberg/checkpoints
      - STREAMING_API_PORT=8002
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_REGION=us-east-1
    volumes:
      - ./services/streaming-service:/app
    restart: unless-stopped
    networks:
      - github-events-network

  api-service:
    build:
      context: .
      dockerfile: services/api-service/Dockerfile
    container_name: api-service
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "8003:8003"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8003
      - SPARK_MASTER=local[*]
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - ICEBERG_WAREHOUSE_PATH=s3a://iceberg/warehouse
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_REGION=us-east-1
    volumes:
      - ./services/api-service:/app
    restart: unless-stopped
    networks:
      - github-events-network

  dashboard-service:
    build:
      context: .
      dockerfile: services/dashboard-service/Dockerfile
    container_name: dashboard-service
    depends_on:
      - api-service
    ports:
      - "8080:80"
    restart: unless-stopped
    networks:
      - github-events-network

volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  minio-data:
    driver: local

networks:
  github-events-network:
    driver: bridge
